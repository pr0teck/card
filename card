#coding: utf-8

import random
import console

global playerNames, endOfGame
playerNames = ['Spades', 'Hearts', 'Dimonds', 'Clubs']
numbers = ['9', 'T', 'J', 'Q', 'K', 'A']
suits = ['s', 'h', 'c', 'd']
suits_full = {'Spades':'s', 'Hearts':'h','Clubs':'c', 'Dimonds':'d'}
endOfGame = False

class Player:
	def __init__(self, id, name, listOfCards, trump):
		self.id = id
		self.name = name
		self.listOfCards = listOfCards
		self.trump = trump
		
	def addCard(card):
		self.listOfCards.append(card)
		
	def __iter__(self):
		return iter(self)
		
	def __str__(self):
		return 'Player ' + str(self.name) + ': ' + str(self.listOfCards)
		
class Round:
	def __init__(self, deck, players, roundNumber):
		self.endOfRound = False
		self.Deck = deck
		self.Players = players
		self.roundNumber = roundNumber
		self.roundOwnerId = 0
		self.turnNumber = 1
		self.Table = []
	
	def startRound(self):
		global endOfGame
		print 'round started'
		random.shuffle(self.Deck) #тасуем колоду
		self.RoundCards = giveCards(self.Players, self.Deck) #раздаем карты игрокам
		for player in self.Players:
			print player	#выводим данные о картах игроков
		if self.roundNumber==1:
			self.roundOwnerId = random.randrange(4) #определяем кто первый ходит в первом раунде
		while not self.endOfRound:
			print 'запустили раунд' + str(self.roundNumber)
			self.startTurn(self.roundOwnerId)
			self.turnNumber += 1
		#endOfGame = True
		
	def startTurn(self, roundOwnerId):
		#print 'запустили ход' + str(self.turnNumber)
		print 'ходит игрок: ' + str(self.Players[roundOwnerId])
		listOfCards = self.Players[roundOwnerId].listOfCards
		numberOfCards = len(listOfCards)
		if len(self.Table)==0:
			self.attack(roundOwnerId, listOfCards, numberOfCards)
		else:
			self.defense(roundOwnerId, listOfCards, numberOfCards)
			if not self.endOfRound:
				numberOfCards -= 1
				self.attack(roundOwnerId, listOfCards, numberOfCards)
		
		self.roundOwnerId = (roundOwnerId + 1) % len(self.Players)
		if numberOfCards==0:
			self.endOfRound = True

	def attack(self, roundOwnerId, listOfCards, numberOfCards):
		choice = input_number('чем атакуем: ', 1, numberOfCards)
		self.Table.append(listOfCards.pop(choice-1))
		print 'на столе: ' + str(self.Table)
		#print str(self.Players[roundOwnerId])
		
	def defense(self, roundOwnerId, listOfCards, numberOfCards):
		defenseProcess = True
		topTableCard = self.Table[len(self.Table)-1]
		playerTrump = self.Players[roundOwnerId].trump
		while defenseProcess:
			if checkDefenseAvailable(listOfCards, topTableCard, playerTrump):
				choice = input_number('чем защищаемся: ', 1, numberOfCards)
				if listOfCards[choice-1] in canDefense(topTableCard, playerTrump):
					self.Table.append(listOfCards.pop(choice-1))
					print 'на столе: ' + str(self.Table)
				#print 
					defenseProcess = False
				else:
					print 'неверный ход'			
			else:
				print 'вы не можете отбить атаку'
				listOfCards = listOfCards.extend(self.Table)
				print str(self.Players[roundOwnerId])
				self.Table = []
				self.endOfRound = True
				defenseProcess = False
				
class Game:
	def __init__(self):
		self.Players = self.createPlayers() #список игроков
		self.Deck = populateDeck() # создаем список карт
		self.RoundCards = {} # структура раунда, ключи - игроки, значения - карты
		self.roundNumber = 1
		self.start()
		
	def createPlayers(self):
		listOfPlayers = []
		for index in range(4):
			player = Player(index, playerNames[index], [], playerNames[index])
			listOfPlayers.append(player)
		return listOfPlayers
		
	def start(self):
		while not endOfGame:
			round = Round(self.Deck,self.Players, self.roundNumber)
			round.startRound()
			self.roundNumber += 1
		else:
			self.finishGame()

	def finishGame(self):
		print 'game is finished'

#вспомогательные функции
def populateDeck(): #генерим колоду карт
	Deck = []
	for suit in suits:
		for number in numbers:
			card = number + suit
			Deck.append(card)		
	return Deck

def giveCards(players, deck): #раздаем карты
	result = {}
	for player in players:
		result[player]= []
	while len(deck) != 0:
		for player in players:
			card = deck.pop()
			playerDeck = player.listOfCards
			playerDeck.append(card)
			result[player] = playerDeck
	return result

#Helper function to input a number within a given range:
def input_number(prompt, min_value, max_value):
	value = None
	while value is None:
		try:
			value = int(raw_input(prompt))
		except ValueError:
			print 'Please enter a number!'
		if value < min_value or value > max_value:
			print ('Please enter a number between %i and %i!' % 
			       (min_value, max_value))
			value = None
	return value

def canDefense(card, trump):
	card_suit = card[1]
	returnList=[]
	if getKeyByValue(suits_full, card_suit)==trump:
		returnList = getCardRow(card)
	else:
		returnList = getCardRow(card)
		for number in numbers:
			returnList.append(number + suits_full[trump])
	return returnList
	
def getCardRow(card):
	cardNumber = card[0]
	cardSuit = card[1]
	CardRow = []
	requiredCard = ''
	for number in numbers:
		if numbers.index(number)>numbers.index(cardNumber):
			cardRequired = number + cardSuit
			CardRow.append(cardRequired)
	return CardRow

def getKeyByValue(dict, value):
	for key in iter(dict):
		if dict[key]==value:
			return key

def checkDefenseAvailable(listOfCards, tableCard, trump):
	result = False
	for card in listOfCards:
		if card not in canDefense(tableCard, trump):
			continue
		else:
			result = True
	return result




console.clear()
Game()
		
